package uk.co.richtextformat.display{	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.text.TextField;	import flash.events.Event;	import org.richtextformat.interfaces.IEnable;		public class LabelledButton extends AnimatedButton implements IEnable 	{		private var _label:TextField;				public static const OVER						:String = "labelledButtonOver";		public static const OUT							:String = "labelledButtonOut";		public static const PRESSED						:String = "labelledButtonPressed";		public static const RELEASED					:String = "labelledButtonReleased";		public static const RELEASED_OUTSIDE			:String = "labelledButtonReleasedOutside";				// constructor		public function LabelledButton (mc:Sprite)		{			super(mc);			_init();		}				private function _init ():void		{			var obj:DisplayObject;			var objName:String;			var i:int=-1;			var len:int = _mc.numChildren;			while (++i<len){				obj = _mc.getChildAt(i);				//trace(obj+" : " +(obj is TextField));				if (obj is TextField){					_label = TextField(obj);					break;				}			};						reset();		}				override public function reset ():void		{			super.reset();		}				public function setLabel (l:String):void		{			if (_label){				_label.text = l;							} else {				trace("LabelledButton setLable WARNING: button label will not be set because there is no default textfield set.");			}		}				override protected function _dispatchOver ():void		{			dispatchEvent(new Event(OVER));		}				override protected function _dispatchOut ():void		{			dispatchEvent(new Event(OUT));		}				override protected function _dispatchPressed ():void		{			dispatchEvent(new Event(PRESSED));		}				override protected function _dispatchReleased ():void		{			dispatchEvent(new Event(RELEASED));		}				override protected function _dispatchReleasedOutside ():void		{			dispatchEvent(new Event(RELEASED_OUTSIDE));		}	}}